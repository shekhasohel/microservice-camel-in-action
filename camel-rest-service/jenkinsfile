pipeline {
    environment {
        appName = 'camel-rest-service'
        appVersion = '1.0'
        healthcheck_path = '/healthz'
        dockerRepoURL = '10.212.254.207:5000'
        openshiftRepoURL = 'default-route-openshift-image-registry.apps.us-west-1.starter.openshift-online.com'
        nexusCredentialsId = 'nexus'
        ocp_project = 'sit'
        jdk_version = '8'
        appFileName = 'dms-report-viewer-0.0.1-SNAPSHOT.war'
    }

    agent any

    stages {
        stage('Checkout'){
            steps {
                echo '*************** Stage: Checkout source code **************'
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo '*************** Stage: Install dependencies and package **************'

                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    cd libs/oracle_driver
                    mvn install:install-file -Dfile=ojdbc7-12.1.0.2.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar -DgeneratePom=true
                    mvn -version
                    cd ../..
                    cd libs/crystalreport_lib
                    mvn install:install-file -Dfile=aspectjrt.jar -DgroupId=com.dsl.report  -DartifactId=aspectjrt -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=bcm.jar -DgroupId=com.dsl.report  -DartifactId=bcm -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ceaspect.jar -DgroupId=com.dsl.report  -DartifactId=ceaspect -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=cecore.jar -DgroupId=com.dsl.report  -DartifactId=cecore -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=celib.jar -DgroupId=com.dsl.report  -DartifactId=celib -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=cereports.jar -DgroupId=com.dsl.report  -DartifactId=cereports -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=certjFIPS.jar -DgroupId=com.dsl.report  -DartifactId=certjFIPS -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=cesession.jar -DgroupId=com.dsl.report  -DartifactId=cesession -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=CorbaIDL.jar -DgroupId=com.dsl.report  -DartifactId=CorbaIDL -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=cryptojce.jar -DgroupId=com.dsl.report  -DartifactId=cryptojce -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=cryptojFIPS.jar -DgroupId=com.dsl.report  -DartifactId=cryptojFIPS -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=CrystalReportsSDK.jar -DgroupId=com.dsl.report  -DartifactId=CrystalReportsSDK -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ebus405.jar -DgroupId=com.dsl.report  -DartifactId=ebus405 -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=icu_3.4.4.1.jar -DgroupId=com.dsl.report  -DartifactId=icu -Dversion=3.4 -Dpackaging=jar
					mvn install:install-file -Dfile=jcmFIPS.jar -DgroupId=com.dsl.report  -DartifactId=jcmFIPS -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=LinearBarCode.jar -DgroupId=com.dsl.report  -DartifactId=LinearBarCode -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=MetafileRenderer.jar -DgroupId=com.dsl.report  -DartifactId=MetafileRenderer -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ras21core.jar -DgroupId=com.dsl.report  -DartifactId=ras21core -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ras21dsl.jar -DgroupId=com.dsl.report  -DartifactId=ras21dsl -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ras21proc.jar -DgroupId=com.dsl.report  -DartifactId=ras21proc -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ras21sdk.jar -DgroupId=com.dsl.report  -DartifactId=ras21sdk -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=relaxngDatatype.jar -DgroupId=com.dsl.report  -DartifactId=relaxngDatatype -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=reportsourcebridge.jar -DgroupId=com.dsl.report  -DartifactId=reportsourcebridge -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ReportTemplate.jar -DgroupId=com.dsl.report  -DartifactId=ReportTemplate -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=ReportViewer.jar -DgroupId=com.dsl.report  -DartifactId=ReportViewer -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=sap.com-tc-sec-csi.jar -DgroupId=com.dsl.report  -DartifactId=sap.com-tc-sec-csi -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=SL_plugins.jar -DgroupId=com.dsl.report  -DartifactId=SL_plugins -Dversion=1.0 -Dpackaging=jar
					mvn install:install-file -Dfile=slf4j-api-1.7.7.jar -DgroupId=com.dsl.report  -DartifactId=slf4j-api-1.7.7 -Dversion=1.7 -Dpackaging=jar
					mvn install:install-file -Dfile=ssljFIPS.jar -DgroupId=com.dsl.report  -DartifactId=ssljFIPS -Dversion=1.7 -Dpackaging=jar
					mvn install:install-file -Dfile=TraceLog.jar -DgroupId=com.dsl.report  -DartifactId=TraceLog -Dversion=1.7 -Dpackaging=jar
					mvn install:install-file -Dfile=uploadbean.jar -DgroupId=com.dsl.report  -DartifactId=uploadbean -Dversion=1.7 -Dpackaging=jar
					mvn install:install-file -Dfile=webreporting.jar -DgroupId=com.dsl.report  -DartifactId=webreporting -Dversion=1.7 -Dpackaging=jar
					mvn install:install-file -Dfile=logging.jar -DgroupId=com.dsl.report  -DartifactId=logging -Dversion=1.1 -Dpackaging=jar
					mvn install:install-file -Dfile=log4j.jar -DgroupId=com.dsl.report  -DartifactId=log4j -Dversion=1.0 -Dpackaging=jar
                    mvn -version

                    cd ../..
                    mvn clean
                    mvn install -X -Dmaven.test.skip=true
                    pwd

                    cp target/${appFileName} ${appName}-${appVersion}.${BUILD_NUMBER}.war
                '''
            }
        }

        stage('Archieve') {
            steps {
                echo '*************** Stage: Upload archieve to Nexus **************'
                
                nexusArtifactUploader (
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${nexusBaseURL}",
                    groupId: "com.${appName}",
                    version: "${appVersion}.${BUILD_NUMBER}",
                    repository: 'openshift-raw',
                    credentialsId: "${nexusCredentialsId}",
                    artifacts: [
                        [
                            artifactId: "com.${appName}",
                            type: 'war',
                            file: "${appName}-${appVersion}.${BUILD_NUMBER}.war"
                        ]
                    ]
                )
            }
        }

        stage('OC Build') {
            steps {
                echo '*************** Stage: Perform S2I Build **************'
                
                script {
                    openshift.withCluster('ocpnonprod') {
                        openshift.withProject("${ocp_project}") {
                            echo "In project ${openshift.project()} in cluster ${openshift.cluster()}"
                            
                            def ocApplyResult = openshift.apply(openshift.raw("process -f ./deployment/openshift/template/build.yaml -n ${ocp_project} \
                                -p NAME='${appName}' \
                                -p NAMESPACE='${ocp_project}' \
                                -p JDK_VERSION='${jdk_version}'").actions[0].out).out
                            echo "${ocApplyResult}"

                            def ocBuildResult = openshift.raw("start-build ${appName} -n ${ocp_project} --from-dir . --follow --wait").out
                            echo "${ocBuildResult}"
                        }
                    }
                }
            }
        }

        stage('Image Archieve'){
            steps {
                echo '*************** Stage: Architve Build Image from Openshift Registry to Nexus **************'
                
                script {
                    openshift.withCluster('ocpnonprod') {
                        openshift.withProject("${ocp_project}") {
                            echo "In project ${openshift.project()} in cluster ${openshift.cluster()}"

                            def res = openshift.raw("whoami -t").out

                            sh """
                                set +x
                                set -e
                                oc login ${openshift.cluster()} --insecure-skip-tls-verify --token=${res}
                                
                                oc project ${ocp_project}

                                skopeo copy \
                                docker://${openshiftRepoURL}/${ocp_project}/${appName}:latest \
                                docker://${dockerRepoURL}/ocp/${appName}:${appVersion}.${BUILD_NUMBER} \
                                --src-tls-verify=false --dest-tls-verify=false \
                                --src-creds=openshift:\$(oc whoami -t)
                            """
                        }
                    }
                }
            }
        }

        stage('OC Deploy') {
            steps {
                echo '*************** Stage: Deploy App to Openshift **************'

                script {
                    openshift.withCluster('ocpnonprod') {
                        openshift.withProject("${ocp_project}") {
                            echo "In project ${openshift.project()} in cluster ${openshift.cluster()}"

                            def ocDeployResult = openshift.apply(openshift.raw("process -f ./deployment/openshift/template/deploy.yaml -n ${ocp_project} \
                                -p NAME='${appName}' \
                                -p NAMESPACE='${ocp_project}' \
                                -p HEALTHCHECK_PATH='${healthcheck_path}' \
                                -p MEMORY_LIMIT='2Gi' \
                                -p MEMORY_REQUEST='1Gi' \
                                -p CPU_LIMIT='2' \
                                -p CPU_REQUEST='0.5'").actions[0].out)
                            
                            def dc = openshift.selector('dc', "${appName}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo '*************** Stage: Clean-up resources **************'

                sh 'rm -rf $(pwd)/*'
                // mail body: 'project build successful',
                //             from: 'xxxx@yyyyy.com',
                //             replyTo: 'xxxx@yyyy.com',
                //             subject: 'project build successful',
                //             to: 'yyyyy@yyyy.com'
            }
        }
    }
}